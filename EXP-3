class Node:
    def __init__(self, letter=None, value=None):
        self.letter = letter
        self.value = value

def is_valid(node_list, count, s1, s2, s3):
    val1 = val2 = val3 = 0
    m = 1
    for ch in reversed(s1):
        for node in node_list:
            if node.letter == ch:
                val1 += m * node.value
                break
        m *= 10
    m = 1
    for ch in reversed(s2):
        for node in node_list:
            if node.letter == ch:
                val2 += m * node.value
                break
        m *= 10
    m = 1
    for ch in reversed(s3):
        for node in node_list:
            if node.letter == ch:
                val3 += m * node.value
                break
        m *= 10
    return val3 == (val1 + val2)

def permutation(count, node_list, n, s1, s2, s3, use):
    if n == count - 1:
        for i in range(10):
            if use[i] == 0:
                node_list[n].value = i
                if is_valid(node_list, count, s1, s2, s3):
                    print("Solution found: ", end="")
                    for node in node_list:
                        print(f" {node.letter} = {node.value}", end="")
                    return True
        return False
    for i in range(10):
        if use[i] == 0:
            node_list[n].value = i
            use[i] = 1
            if permutation(count, node_list, n + 1, s1, s2, s3, use):
                return True
            use[i] = 0
    return False

def solve_puzzle(s1, s2, s3):
    unique_char = 0
    freq = [0] * 26
    for ch in s1:
        freq[ord(ch) - ord('A')] += 1
    for ch in s2:
        freq[ord(ch) - ord('A')] += 1
    for ch in s3:
        freq[ord(ch) - ord('A')] += 1
    unique_char = sum(1 for count in freq if count > 0)
    if unique_char > 10:
        print("Invalid strings")
        return False
    node_list = [Node() for _ in range(unique_char)]
    j = 0
    for i in range(26):
        if freq[i] > 0:
            node_list[j].letter = chr(i + ord('A'))
            j += 1
    use = [0] * 10
    return permutation(unique_char, node_list, 0, s1, s2, s3, use)

if __name__ == "__main__":
    s1 = "USA"
    s2 = "USSR"
    s3 = "PEACE"
    if not solve_puzzle(s1, s2, s3):
        print("No solution")

